1. Write a Java program that illustrates the difference between using string literals and the new keyword for creating String objects. Your program should demonstrate the memory usage implications and how string comparison behaves differently in each case. 
```
public class Main {
    public static void main(String[] args) {
        // Using string literals
        String str1 = "Hello";
        String str2 = "Hello";

        // Using new keyword
        String str3 = new String("Hello");
        String str4 = new String("Hello");

        // Memory usage implications
        System.out.println("str1 == str2: " + (str1 == str2)); // This will print: true
        System.out.println("str3 == str4: " + (str3 == str4)); // This will print: false

        // String comparison
        System.out.println("str1.equals(str2): " + str1.equals(str2)); // This will print: true
        System.out.println("str3.equals(str4): " + str3.equals(str4)); // This will print: true
    }
}

```



2. Write a Java program that demonstrates the immutability of the String class and how it implements the CharSequence interface. Your program should illustrate the behaviours that highlight String immutability and its usage as a CharSequence. 
```
public class Main {
    public static void main(String[] args) {
        // Create a String
        String str = "Hello";

        // Attempt to modify the String
        String modifiedStr = str.replace('H', 'J');

        // Print the original and modified Strings
        System.out.println("Original String: " + str); // This will print: Hello
        System.out.println("Modified String: " + modifiedStr); // This will print: Jello

        // Use the String as a CharSequence
        CharSequence charSequence = str;

        // Print the characters in the CharSequence
        for (int i = 0; i < charSequence.length(); i++) {
            System.out.println("Character at index " + i + ": " + charSequence.charAt(i));
        }
    }
}

```


3. ==Write a Java program that uses StringBuffer to construct a simple text editor which can perform the following operations: a. Append a given string to the existing text. b. Insert a given string at a specified index within the existing text. c. Delete a portion of text between two specified indices. d. Reverse the entire text. e. Replace a portion of the text between two specified indices with a given string. Your program should display a menu with options to perform each of the above operations. After each operation, print the current state of the text. Also, display the current capacity and length of the StringBuffer after each operation to showcase its dynamic nature.== 
```
import java.util.Scanner;

public class TextEditor {
    private StringBuffer text;

    public TextEditor() {
        this.text = new StringBuffer();
    }

    public void append(String str) {
        text.append(str);
        printState("Append");
    }

    public void insert(int index, String str) {
        text.insert(index, str);
        printState("Insert");
    }

    public void delete(int start, int end) {
        text.delete(start, end);
        printState("Delete");
    }

    public void reverse() {
        text.reverse();
        printState("Reverse");
    }

    public void replace(int start, int end, String str) {
        text.replace(start, end, str);
        printState("Replace");
    }

    private void printState(String operation) {
        System.out.println("\nAfter " + operation + ":");
        System.out.println("Text: " + text);
        System.out.println("Length: " + text.length());
        System.out.println("Capacity: " + text.capacity() + "\n");
    }

    public static void main(String[] args) {
        TextEditor editor = new TextEditor();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Choose an operation:");
            System.out.println("1. Append");
            System.out.println("2. Insert");
            System.out.println("3. Delete");
            System.out.println("4. Reverse");
            System.out.println("5. Replace");
            System.out.println("6. Exit");
            System.out.print("Your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter string to append: ");
                    editor.append(scanner.nextLine());
                    break;
                case 2:
                    System.out.print("Enter index to insert at: ");
                    int index = scanner.nextInt();
                    scanner.nextLine(); // consume newline
                    System.out.print("Enter string to insert: ");
                    editor.insert(index, scanner.nextLine());
                    break;
                case 3:
                    System.out.print("Enter start index to delete: ");
                    int start = scanner.nextInt();
                    System.out.print("Enter end index to delete: ");
                    int end = scanner.nextInt();
                    scanner.nextLine(); // consume newline
                    editor.delete(start, end);
                    break;
                case 4:
                    editor.reverse();
                    break;
                case 5:
                    System.out.print("Enter start index to replace: ");
                    int replaceStart = scanner.nextInt();
                    System.out.print("Enter end index to replace: ");
                    int replaceEnd = scanner.nextInt();
                    scanner.nextLine(); // consume newline
                    System.out.print("Enter string to replace with: ");
                    editor.replace(replaceStart, replaceEnd, scanner.nextLine());
                    break;
                case 6:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}

```


4. ==Create a Java program that uses StringBuilder to perform a series of text manipulations on a user-provided string. The program should allow users to: a. Add a substring at a specified position. b. Remove a range of characters from the string. c. Modify a character at a specified index. d. Concatenate another string at the end. e. Display the current string after each operation. The program should repeatedly prompt the user to choose an operation until they decide to exit. After each operation, it should display the modified string, demonstrating the mutable nature of StringBuilder.== 
```
import java.util.Scanner;

public class TextManipulator {
    private StringBuilder text;

    public TextManipulator(String initialText) {
        this.text = new StringBuilder(initialText);
    }

    public void addSubstring(int position, String substring) {
        text.insert(position, substring);
        printState("Add Substring");
    }

    public void removeRange(int start, int end) {
        text.delete(start, end);
        printState("Remove Range");
    }

    public void modifyCharacter(int index, char newChar) {
        text.setCharAt(index, newChar);
        printState("Modify Character");
    }

    public void concatenate(String str) {
        text.append(str);
        printState("Concatenate");
    }

    private void printState(String operation) {
        System.out.println("\nAfter " + operation + ":");
        System.out.println("Text: " + text + "\n");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter initial text:");
        TextManipulator manipulator = new TextManipulator(scanner.nextLine());

        while (true) {
            System.out.println("Choose an operation:");
            System.out.println("1. Add a substring at a specified position");
            System.out.println("2. Remove a range of characters from the string");
            System.out.println("3. Modify a character at a specified index");
            System.out.println("4. Concatenate another string at the end");
            System.out.println("5. Exit");
            System.out.print("Your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter position: ");
                    int position = scanner.nextInt();
                    scanner.nextLine(); // consume newline
                    System.out.print("Enter substring: ");
                    manipulator.addSubstring(position, scanner.nextLine());
                    break;
                case 2:
                    System.out.print("Enter start index: ");
                    int start = scanner.nextInt();
                    System.out.print("Enter end index: ");
                    int end = scanner.nextInt();
                    scanner.nextLine(); // consume newline
                    manipulator.removeRange(start, end);
                    break;
                case 3:
                    System.out.print("Enter index: ");
                    int index = scanner.nextInt();
                    System.out.print("Enter new character: ");
                    char newChar = scanner.next().charAt(0);
                    scanner.nextLine(); // consume newline
                    manipulator.modifyCharacter(index, newChar);
                    break;
                case 4:
                    System.out.print("Enter string to concatenate: ");
                    manipulator.concatenate(scanner.nextLine());
                    break;
                case 5:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}

```


5. ==Create a Java program that compares the performance of StringBuilder and StringBuffer when performing repeated string concatenations. The program should: a. Prompt the user to enter a base string and the number of times it should be concatenated to itself. b. Use StringBuilder to concatenate the string the specified number of times, tracking the time taken to complete the operation. c. Repeat the process using StringBuffer, again tracking the time taken. d. Output the time taken for each operation and the final length of the resulting strings to demonstrate both the time efficiency and the result of using StringBuilder and StringBuffer. Example output of the program could look like this: Enter the base string: > Hello Enter the number of concatenations: > 10000 Using StringBuilder... Time taken: 5 milliseconds Final string length: 50000 Using StringBuffer... Time taken: 6 milliseconds Final string length: 50000 Comparison: StringBuilder was faster than StringBuffer by 1 millisecond.== 
```
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the base string:");
        String baseString = scanner.nextLine();

        System.out.println("Enter the number of concatenations:");
        int numConcatenations = scanner.nextInt();

        // Using StringBuilder
        long startTime = System.currentTimeMillis();
        StringBuilder sb = new StringBuilder(baseString);
        for (int i = 0; i < numConcatenations; i++) {
            sb.append(baseString);
        }
        long endTime = System.currentTimeMillis();
        System.out.println("Using StringBuilder...");
        System.out.println("Time taken: " + (endTime - startTime) + " milliseconds");
        System.out.println("Final string length: " + sb.length());

        // Using StringBuffer
        startTime = System.currentTimeMillis();
        StringBuffer sbf = new StringBuffer(baseString);
        for (int i = 0; i < numConcatenations; i++) {
            sbf.append(baseString);
        }
        endTime = System.currentTimeMillis();
        System.out.println("Using StringBuffer...");
        System.out.println("Time taken: " + (endTime - startTime) + " milliseconds");
        System.out.println("Final string length: " + sbf.length());
    }
}

```


6. ==Case Conversion and Comparison: Prompt the user to input two strings. Convert both strings to lowercase and uppercase. Compare the converted strings to check case-insensitive equality. Display the converted strings and the result of the comparison.== 
```
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the first string:");
        String str1 = scanner.nextLine();

        System.out.println("Enter the second string:");
        String str2 = scanner.nextLine();

        String str1Lower = str1.toLowerCase();
        String str1Upper = str1.toUpperCase();

        String str2Lower = str2.toLowerCase();
        String str2Upper = str2.toUpperCase();

        boolean isEqualIgnoreCase = str1Lower.equals(str2Lower);

        System.out.println("First string in lowercase: " + str1Lower);
        System.out.println("First string in uppercase: " + str1Upper);

        System.out.println("Second string in lowercase: " + str2Lower);
        System.out.println("Second string in uppercase: " + str2Upper);

        System.out.println("The strings are " + (isEqualIgnoreCase ? "" : "not ") + "equal ignoring case.");
    }
}

```


7. ==Character Array and Search: Ask for a string from the user. Convert the string to a character array. Prompt the user to enter a character to search in the string. Find the first and last occurrences of the character. Display the character array and the positions found (if any). ==
```
import java.util.Scanner;
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Ask for a string from the user
        System.out.println("Please enter a string: ");
        String s = scanner.nextLine();

        // Convert the string to a character array
        char[] charArray = s.toCharArray();

        // Prompt the user to enter a character to search in the string
        System.out.println("Please enter a character to search in the string: ");
        char ch = scanner.next().charAt(0);

        // Find the first and last occurrences of the character
        ArrayList<Integer> occurrences = new ArrayList<>();
        for (int i = 0; i < charArray.length; i++) {
            if (charArray[i] == ch) {
                occurrences.add(i);
            }
        }

        // Display the character array and the positions found (if any)
        System.out.println("Character Array: ");
        for (char c : charArray) {
            System.out.print(c + " ");
        }
        System.out.println();

        if (!occurrences.isEmpty()) {
            System.out.println("The character '" + ch + "' is found at the following positions: " + occurrences);
        } else {
            System.out.println("The character '" + ch + "' is not found in the string.");
        }
    }
}

```


8. String Concatenation and Character Retrieval: Take two strings from the user. Concatenate them using the string method and the + operator, then display both results. Ask the user for an index number, then display the character at that index. 
```
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Take two strings from the user
        System.out.println("Please enter the first string: ");
        String s1 = scanner.nextLine();
        System.out.println("Please enter the second string: ");
        String s2 = scanner.nextLine();

        // Concatenate them using the string method and the + operator
        String concatMethod = s1.concat(s2);
        String concatOperator = s1 + s2;

        // Display both results
        System.out.println("Concatenation using the string method: " + concatMethod);
        System.out.println("Concatenation using the + operator: " + concatOperator);

        // Ask the user for an index number
        System.out.println("Please enter an index number: ");
        int index = scanner.nextInt();

        // Display the character at that index
        if (index >= 0 && index < concatOperator.length()) {
            System.out.println("The character at index " + index + " is: " + concatOperator.charAt(index));
        } else {
            System.out.println("Index out of range. Please enter a number between 0 and " + (concatOperator.length() - 1));
        }
    }
}

```


9. ==Word Replacement in Sentences: Request a sentence and two words from the user: one to search for and one to replace it with. Find the first occurrence of the search word in the sentence. Replace the word using substring operations and concatenation. Display the original and the modified sentences. ==
```
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Request a sentence from the user
        System.out.println("Please enter a sentence: ");
        String sentence = scanner.nextLine();

        // Request two words from the user
        System.out.println("Please enter a word to search for: ");
        String searchWord = scanner.nextLine();
        System.out.println("Please enter a word to replace it with: ");
        String replaceWord = scanner.nextLine();

        // Find the first occurrence of the search word in the sentence
        int index = sentence.indexOf(searchWord);

        // Replace the word using substring operations and concatenation
        if (index != -1) {
            String modifiedSentence = sentence.substring(0, index) + replaceWord + sentence.substring(index + searchWord.length());

            // Display the original and the modified sentences
            System.out.println("Original Sentence: " + sentence);
            System.out.println("Modified Sentence: " + modifiedSentence);
        } else {
            System.out.println("The search word '" + searchWord + "' is not found in the sentence.");
        }
    }
}

```


10. ==Interactive String Explorer: Prompt the user for a string. Display a menu with options to perform various operations: convert to lowercase/uppercase, search for a character/index, or concatenate with another string. Based on user selection, perform the appropriate string operation and show the result==
```
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt the user for a string
        System.out.println("Please enter a string: ");
        String s = scanner.nextLine();

        while (true) {
            // Display a menu with options to perform various operations
            System.out.println("\n1. Convert to lowercase");
            System.out.println("2. Convert to uppercase");
            System.out.println("3. Search for a character");
            System.out.println("4. Search for an index");
            System.out.println("5. Concatenate with another string");
            System.out.println("6. Exit");
            System.out.println("Please enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine();  // consume newline left-over

            switch (choice) {
                case 1:
                    // Convert to lowercase
                    System.out.println("Lowercase: " + s.toLowerCase());
                    break;
                case 2:
                    // Convert to uppercase
                    System.out.println("Uppercase: " + s.toUpperCase());
                    break;
                case 3:
                    // Search for a character
                    System.out.println("Enter a character to search for: ");
                    char ch = scanner.next().charAt(0);
                    int index = s.indexOf(ch);
                    if (index != -1) {
                        System.out.println("The character '" + ch + "' is found at index " + index);
                    } else {
                        System.out.println("The character '" + ch + "' is not found in the string.");
                    }
                    break;
                case 4:
                    // Search for an index
                    System.out.println("Enter an index to retrieve the character: ");
                    index = scanner.nextInt();
                    if (index >= 0 && index < s.length()) {
                        System.out.println("The character at index " + index + " is: " + s.charAt(index));
                    } else {
                        System.out.println("Index out of range. Please enter a number between 0 and " + (s.length() - 1));
                    }
                    break;
                case 5:
                    // Concatenate with another string
                    System.out.println("Enter another string to concatenate with: ");
                    String s2 = scanner.next();
                    System.out.println("Concatenated string: " + s + s2);
                    break;
                case 6:
                    // Exit
                    System.out.println("Exiting...");
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please enter a number between 1 and 6.");
            }
        }
    }
}

```
